// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sequelize-auto generateText should generate correct text 1`] = `
"module.exports = function (sequelize, DataTypes) {
  return sequelize.define(\\"my_table\\", {
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
    },
    autoIncrement: {
      autoIncrement: true,
      type: DataTypes.INTEGER,
    },
    primaryKey: {
      primaryKey: true,
      type: DataTypes.INTEGER,
    },
    \\"2field\\": {
      defaultValue: 2,
      type: DataTypes.INTEGER,
    },
    stringDefault: {
      defaultValue: \\"hi\\",
      type: DataTypes.STRING,
    },
    unique: {
      type: DataTypes.INTEGER,
      unique: true,
    },
    special: {
      type: DataTypes.INTEGER,
    },
    allowNull: {
      allowNull: true,
      type: DataTypes.INTEGER,
    },
    allowNullFalse: {
      allowNull: false,
      type: DataTypes.INTEGER,
    },
    current_timestamp: {
      defaultValue: sequelize.literal(\\"current_timestamp\\"),
      type: DataTypes.DATE,
    },
    current_date: {
      defaultValue: sequelize.literal(\\"current_date\\"),
      type: DataTypes.DATE,
    },
    current_time: {
      defaultValue: sequelize.literal(\\"current_time\\"),
      type: DataTypes.DATE,
    },
    localtime: {
      defaultValue: sequelize.literal(\\"localtime\\"),
      type: DataTypes.DATE,
    },
    localtimestamp: {
      defaultValue: sequelize.literal(\\"localtimestamp\\"),
      type: DataTypes.DATE,
    },
    otherdate: {
      defaultValue: \\"1970-01-01\\",
      type: DataTypes.DATE,
    },
    getdate: {
      defaultValue: sequelize.fn(\\"getdate\\"),
      type: DataTypes.DATE,
    },
    comment: {
      comment: \\"comment\\",
      type: DataTypes.STRING,
    },
    commentnull: {
      type: DataTypes.STRING,
    },
    userDefined: {
      type: DataTypes.ENUM(\\"special1\\", \\"special2\\"),
    },
    weirdAttr: {
      weirdAttr: {\\"string\\":\\"string\\",\\"num\\":1,\\"bool\\":true},
      type: \\"weird\\",
    },
    enum: {
      type: DataTypes.ENUM(\\"item1\\", \\"item2\\"),
    },
    set: {
      type: DataTypes.ENUM(\\"item1\\", \\"item2\\"),
    },
    varchar: {
      type: DataTypes.STRING(1),
    },
    varcharbinary: {
      type: DataTypes.STRING(1).BINARY,
    },
    varcharmax: {
      type: DataTypes.STRING(\\"MAX\\"),
    },
    string: {
      type: DataTypes.STRING,
    },
    varying: {
      type: DataTypes.STRING,
    },
    nvarchar: {
      type: DataTypes.STRING,
    },
    xml: {
      type: DataTypes.STRING,
    },
    nchar: {
      type: DataTypes.CHAR,
    },
    char: {
      type: DataTypes.CHAR(8),
    },
    tinytext: {
      type: DataTypes.TEXT(\\"tiny\\"),
    },
    mediumtext: {
      type: DataTypes.TEXT(\\"medium\\"),
    },
    text: {
      type: DataTypes.TEXT,
    },
    longtext: {
      type: DataTypes.TEXT(\\"long\\"),
    },
    ntext: {
      type: DataTypes.TEXT,
    },
    tinyint: {
      type: DataTypes.TINYINT(1),
    },
    smallint: {
      type: DataTypes.SMALLINT(4),
    },
    mediumint: {
      type: DataTypes.MEDIUMINT(8),
    },
    int: {
      type: DataTypes.INTEGER(32),
    },
    bigint: {
      type: DataTypes.BIGINT,
    },
    unsigned: {
      type: DataTypes.INTEGER.UNSIGNED,
    },
    zerofill: {
      type: DataTypes.INTEGER(10).ZEROFILL,
    },
    float: {
      type: DataTypes.FLOAT(4),
    },
    float4: {
      type: DataTypes.FLOAT,
    },
    float8: {
      type: DataTypes.DOUBLE,
    },
    double: {
      type: DataTypes.DOUBLE(10),
    },
    numeric: {
      type: DataTypes.DOUBLE,
    },
    decimal: {
      type: DataTypes.DECIMAL(10, 2),
    },
    money: {
      type: DataTypes.DECIMAL,
    },
    real: {
      type: DataTypes.REAL,
    },
    boolean: {
      type: DataTypes.BOOLEAN,
    },
    bit1: {
      defaultValue: \\"1\\",
      type: DataTypes.BOOLEAN,
    },
    bit0: {
      defaultValue: \\"0\\",
      type: DataTypes.BOOLEAN,
    },
    bit: {
      type: DataTypes.BOOLEAN,
    },
    tinyblob: {
      type: DataTypes.BLOB(\\"tiny\\"),
    },
    mediumblob: {
      type: DataTypes.BLOB(\\"medium\\"),
    },
    blob: {
      type: DataTypes.BLOB,
    },
    longblob: {
      type: DataTypes.BLOB(\\"long\\"),
    },
    varbinary: {
      type: DataTypes.BLOB,
    },
    image: {
      type: DataTypes.BLOB,
    },
    date: {
      type: DataTypes.DATEONLY,
    },
    smalldate: {
      type: DataTypes.DATE,
    },
    datetime: {
      type: DataTypes.DATE,
    },
    datetime2: {
      type: DataTypes.DATE,
    },
    timestamp: {
      type: DataTypes.DATE,
    },
    time: {
      type: DataTypes.TIME,
    },
    uuid: {
      type: DataTypes.UUIDV4,
    },
    uniqueidentifier: {
      type: DataTypes.UUIDV4,
    },
    jsonb: {
      type: DataTypes.JSONB,
    },
    json: {
      type: DataTypes.JSON,
    },
    array: {
      type: DataTypes.ARRAY,
    },
    geometry: {
      type: DataTypes.GEOMETRY,
    },
    other: {
      type: \\"other\\",
    },
  }, {
    tableName: \\"my_table\\",
    schema: \\"schema\\",
  });
};
"
`;

exports[`sequelize-auto generateText should sort fields and attributes 1`] = `
"module.exports = function (sequelize, DataTypes) {
  return sequelize.define(\\"my_table\\", {
    atest: {
      type: DataTypes.INTEGER,
    },
    id: {
      autoIncrement: true,
      primaryKey: true,
      type: DataTypes.INTEGER,
    },
  }, {
    tableName: \\"my_table\\",
    schema: \\"schema\\",
    timestamps: false,
  });
};
"
`;

exports[`sequelize-auto run writing files should write tables to directory 1`] = `
"module.exports = function (sequelize, DataTypes) {
	return sequelize.define(\\"table\\", {
		id: {
			primaryKey: true,
			autoIncrement: true,
			type: DataTypes.INTEGER,
		},
	}, {
		tableName: \\"table\\",
		timestamps: false,
	});
};
"
`;
